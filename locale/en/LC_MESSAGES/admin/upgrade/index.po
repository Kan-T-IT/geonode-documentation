# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2020, Open Source Geospatial Foundation, CC-SA
# This file is distributed under the same license as the GeoNode package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GeoNode 3.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-08 11:04-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../admin/upgrade/index.rst:3 73471567c004488b9a8c65c148d08b27
msgid "Upgrade GeoNode"
msgstr ""

#~ msgid "Upgrade from 3.1.x"
#~ msgstr ""

#~ msgid "Perform the ``set_all_layers_metadata -d`` management command"
#~ msgstr ""

#~ msgid ""
#~ "Drop the ``rabbitmq`` image and volume"
#~ " and let GeoNode recreate the "
#~ "``queues`` automatically"
#~ msgstr ""

#~ msgid "Upgrade from 2.10.x / 3.0"
#~ msgstr ""

#~ msgid ""
#~ "Also, make sure the code is "
#~ "``Python 3.8`` compatible and that you"
#~ " switched and aligned the **source "
#~ "code** and the **requirements.txt** to "
#~ "the ``3.x`` branch."
#~ msgstr ""

#~ msgid "Prepare the Database and Migrate to the new Schema"
#~ msgstr ""

#~ msgid "Fix the tables in order to migrate to the new schema"
#~ msgstr ""

#~ msgid "Migrate to the new schema"
#~ msgstr ""

#~ msgid "Restore the old contents"
#~ msgstr ""

#~ msgid "Upgrade from 2.4.x"
#~ msgstr ""

#~ msgid ""
#~ "These are the notes of a migration"
#~ " from 2.4.x to 2.10.1. These notes"
#~ " could possibly work also when "
#~ "migrating from 2.6.x, 2.7.x, 2.8.x but"
#~ " are not tested in that scenarios."
#~ " You should run this procedure on "
#~ "your local machine and once you "
#~ "successfully migrated the database move "
#~ "the backup to your GeoNode 2.10.1 "
#~ "production instance."
#~ msgstr ""

#~ msgid "PostgreSQL"
#~ msgstr ""

#~ msgid "Create a role and a database for Django GeoNode 2.4:"
#~ msgstr ""

#~ msgid "Restore backup from your production backup:"
#~ msgstr ""

#~ msgid "Downgrade psycopg2:"
#~ msgstr ""

#~ msgid "Regenerate from scratch the upload application tables in the database:"
#~ msgstr ""

#~ msgid "Regenerate upload tables with migrate:"
#~ msgstr ""

#~ msgid "Upgrade psycopg2:"
#~ msgstr ""

#~ msgid "Fixes on database"
#~ msgstr ""

#~ msgid "For some reason some resources were unpublished:"
#~ msgstr ""

#~ msgid ""
#~ "Remove a foreign key from "
#~ "account_account which is not used "
#~ "anymore (GeoNode dev team: maybe even"
#~ " better let's remove all of the "
#~ "account tables, I think they are "
#~ "stale now):"
#~ msgstr ""

#~ msgid "Fix the remote service layers by running this script:"
#~ msgstr ""

#~ msgid "Upgrade from 3.2.x / 3.3.x"
#~ msgstr ""

#~ msgid "Upgrade the dependencies"
#~ msgstr ""

#~ msgid ""
#~ "Perform the ``migrations`` management command;"
#~ " in case some attribute is "
#~ "conflicting, remove it manually from the"
#~ " DB"
#~ msgstr ""

#~ msgid "Proform the ``collectstatic`` management command"
#~ msgstr ""

#~ msgid "Upgrade the instance dependencies"
#~ msgstr ""

#~ msgid ""
#~ "Check the :ref:`install_dep` and "
#~ ":ref:`install_venv` sections in order to "
#~ "upgrade your Python environment."
#~ msgstr ""

#~ msgid ""
#~ "Also, make sure the code is "
#~ "``Python 3.8`` compatible and that you"
#~ " switched and aligned the **source "
#~ "code** and the **requirements.txt** to "
#~ "the ``master`` branch."
#~ msgstr ""

#~ msgid "This must be done manually and with particular attention."
#~ msgstr ""

#~ msgid "Run GeoNode migrations"
#~ msgstr ""

#~ msgid "Activate your GeoNode virtualenv and set the env vars:"
#~ msgstr ""

#~ msgid ""
#~ "Here are the variables to export -"
#~ " update them to your environment "
#~ "settings:"
#~ msgstr ""

#~ msgid "Apply migrations and apply basic fixtures:"
#~ msgstr ""

#~ msgid ""
#~ "Incase of an error of "
#~ ":guilabel:`django.db.utils.ProgrammingError: column "
#~ "\"colum-name\" of relation \"table-name\""
#~ " already exists` on running migrations, "
#~ "you can backup the field data with"
#~ " the following steps."
#~ msgstr ""

#~ msgid "Run migration then:"
#~ msgstr ""

#~ msgid "Create superuser"
#~ msgstr ""

#~ msgid ""
#~ "To create a superuser you should "
#~ "drop the following constraints (they can"
#~ " be re-enabled if needed):"
#~ msgstr ""

#~ msgid "Update Templates"
#~ msgstr ""

#~ msgid ""
#~ "Update available templates to use {% "
#~ "load static %} instead of {% load"
#~ " staticfiles %}"
#~ msgstr ""

